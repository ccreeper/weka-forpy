from typing import *
import math

class Statistics():
    P0 = [-5.99633501014107895267E1, 9.80010754185999661536E1, -5.66762857469070293439E1,
          1.39312609387279679503E1, -1.23916583867381258016E0]
    Q0 = [1.95448858338141759834E0, 4.67627912898881538453E0, 8.63602421390890590575E1,
          -2.25462687854119370527E2, 2.00260212380060660359E2, -8.20372256168333339912E1,
          1.59056225126211695515E1, -1.18331621121330003142E0]
    P1 = [4.05544892305962419923E0, 3.15251094599893866154E1, 5.71628192246421288162E1,
          4.40805073893200834700E1, 1.46849561928858024014E1, 2.18663306850790267539E0,
          -1.40256079171354495875E-1, -3.50424626827848203418E-2, -8.57456785154685413611E-4]
    Q1 = [1.57799883256466749731E1, 4.53907635128879210584E1, 4.13172038254672030440E1,
          1.50425385692907503408E1, 2.50464946208309415979E0, -1.42182922854787788574E-1,
          -3.80806407691578277194E-2, -9.33259480895457427372E-4]
    P2 = [3.23774891776946035970E0, 6.91522889068984211695E0, 3.93881025292474443415E0,
          1.33303460815807542389E0, 2.01485389549179081538E-1, 1.23716634817820021358E-2,
          3.01581553508235416007E-4, 2.65806974686737550832E-6, 6.23974539184983293730E-9]
    Q2 = [6.02427039364742014255E0, 3.67983563856160859403E0, 1.37702099489081330271E0,
          2.16236993594496635890E-1, 1.34204006088543189037E-2, 3.28014464682127739104E-4,
          2.89247864745380683936E-6, 6.79019408009981274425E-9]


    @classmethod
    def normalInverse(cls,y0:float):
        s2pi=math.sqrt(2*math.pi)
        if y0 <= 0:
            raise Exception("number is less than zero")
        if y0 >= 1:
            raise Exception("number is greater than one")
        code = 1
        y=y0
        if y > 1.0 - math.exp(-2):
            y=1-y
            code=0
        if y > math.exp(-2):
            y=y-0.5
            y2=y*y
            x=y+y*(y2*cls.polevl(y2,cls.P0,4)/cls.p1evl(y2,cls.Q0,8))
            x=x*s2pi
            return x
        x=math.sqrt(-2*math.log(y))
        x0=x-math.log(x)/x
        z=1/x
        if x < 8:
            x1 = z*cls.polevl(z,cls.P1,8)/cls.p1evl(z,cls.Q1,8)
        else:
            x1=z*cls.polevl(z,cls.P2,8)/cls.p1evl(z,cls.Q2,8)
        x=x0-x1
        if code != 0:
            x=-x
        return x

    @classmethod
    def polevl(cls,x:float,coef:List,N:int):
        ans=coef[0]
        for i in range(1,N+1):
            ans=ans*x+coef[i]
        return ans

    @classmethod
    def p1evl(cls,x:float,coef:List,N:int):
        ans=x+coef[0]
        for i in range(1,N):
            ans=ans*x+coef[i]
        return ans